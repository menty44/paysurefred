/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package helb;

import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.annotation.PostConstruct;
import javax.annotation.Resource;
import javax.faces.application.FacesMessage;
import javax.faces.bean.ManagedBean;
import javax.faces.bean.RequestScoped;
import javax.faces.context.FacesContext;
import javax.faces.event.ActionEvent;
import javax.persistence.EntityManager;
import javax.persistence.NoResultException;
import javax.persistence.PersistenceContext;
import paygate.objects.Purchase;

/**
 *
 * @author Joseph
 */
@ManagedBean
@RequestScoped
public class TestBean {

    private List<Student> students;
    private int idnumber;
    private Purchase purchase;
    @PersistenceContext(unitName = "openmerchantPU")
    private EntityManager em;
    @Resource
    private javax.transaction.UserTransaction utx;
    private boolean exist;
    private String condition = "yes";
        
    public TestBean() {
        
    }
    
    @PostConstruct
    public void init(){
        students = new ArrayList<Student>();
        students.add(new Student(1,"Susan","Njeri",21783279));
        students.add(new Student(2,"Nick","Omondi",22783279));
        students.add(new Student(3,"Ken","Keriko",23783279));
        students.add(new Student(4,"Joseph","Njeru",24783279));
        students.add(new Student(5,"Samuel","Ratemo",25783279));
        students.add(new Student(6,"Faith Soy","Chebet",26783279));
        students.add(new Student(7,"Joseph Muga","Omera",27783279));
        students.add(new Student(8,"Diana","Rose",28783279));
        students.add(new Student(9,"George","Okeyo",29783279));
    }

    public List<Student> getStudents() {
        return students;
    }

    public void setStudents(List<Student> students) {
        this.students = students;
    }

    public int getIdnumber() {
        return idnumber;
    }

    public void setIdnumber(int idnumber) {
        this.idnumber = idnumber;
    }

    public Purchase getPurchase() {
        return purchase;
    }

    public void setPurchase(Purchase purchase) {
        this.purchase = purchase;
    }

    public boolean isExist() {
        return exist;
    }

    public void setExist(boolean exist) {
        this.exist = exist;
    }

    public String getCondition() {
        return condition;
    }

    public void setCondition(String condition) {
        this.condition = condition;
    }
                
    public void work(ActionEvent event){             
        try{
            Purchase p = (Purchase) em.createNamedQuery("Purchase.findById").setParameter("id", idnumber).getSingleResult();
            purchase = p;
            System.out.println("found");
            condition = "yes";
            FacesContext context = FacesContext.getCurrentInstance();           
            context.addMessage(null, new FacesMessage("OK", "Student Exists/Found"));
            //exist = true;
        }catch(NoResultException e){
            System.out.println("not found");
            condition = "no";
            condition = "yes";
            FacesContext context = FacesContext.getCurrentInstance();           
            context.addMessage(null, new FacesMessage("Error", "Student NotFound..Contact HELB"));
            //exist = false;
            //e.printStackTrace();
        }
        
        System.out.println("Condition is : "+condition);
        
    }
    
//    public void addMessage() {  
//        String summary = value2 ? "Checked" : "Unchecked";  
//  
//        FacesContext.getCurrentInstance().addMessage(null, new FacesMessage(summary));  
//    }  

    public void persist(Object object) {
        try {
            utx.begin();
            em.persist(object);
            utx.commit();
        } catch (Exception e) {
            Logger.getLogger(getClass().getName()).log(Level.SEVERE, "exception caught", e);
            throw new RuntimeException(e);
        }
    }
    
}
